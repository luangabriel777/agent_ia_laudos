#!/usr/bin/env python3
"""
Script para testar a conex√£o com o banco de dados
"""

import sqlite3
import os

def test_db_connection():
    """Testa a conex√£o com o banco de dados"""
    
    db_path = 'backend/laudos.db'
    
    print("üß™ Testando Conex√£o com Banco de Dados")
    print("=" * 50)
    
    if not os.path.exists(db_path):
        print(f"‚ùå Banco de dados n√£o encontrado: {db_path}")
        return
    
    print(f"‚úÖ Banco de dados encontrado: {db_path}")
    
    try:
        # Teste 1: Conex√£o simples
        print("\nüîó Teste 1: Conex√£o simples")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        print("‚úÖ Conex√£o estabelecida")
        
        # Teste 2: Contar laudos
        print("\nüìä Teste 2: Contar laudos")
        cursor.execute("SELECT COUNT(*) FROM laudos")
        total_laudos = cursor.fetchone()[0]
        print(f"‚úÖ Total de laudos: {total_laudos}")
        
        # Teste 3: Laudos por status
        print("\nüìã Teste 3: Laudos por status")
        cursor.execute("SELECT status, COUNT(*) FROM laudos GROUP BY status")
        status_counts = cursor.fetchall()
        for status, count in status_counts:
            print(f"  - {status}: {count}")
        
        # Teste 4: Laudos hoje
        print("\nüìÖ Teste 4: Laudos hoje")
        cursor.execute("SELECT COUNT(*) FROM laudos WHERE DATE(created_at) = DATE('now')")
        laudos_hoje = cursor.fetchone()[0]
        print(f"‚úÖ Laudos hoje: {laudos_hoje}")
        
        # Teste 5: Laudos da semana
        print("\nüìÖ Teste 5: Laudos da semana")
        cursor.execute("SELECT COUNT(*) FROM laudos WHERE created_at >= DATE('now', '-7 days')")
        laudos_semana = cursor.fetchone()[0]
        print(f"‚úÖ Laudos da semana: {laudos_semana}")
        
        # Teste 6: Laudos do m√™s
        print("\nüìÖ Teste 6: Laudos do m√™s")
        cursor.execute("SELECT COUNT(*) FROM laudos WHERE created_at >= DATE('now', '-30 days')")
        laudos_mes = cursor.fetchone()[0]
        print(f"‚úÖ Laudos do m√™s: {laudos_mes}")
        
        # Teste 7: Laudos pendentes
        print("\n‚è≥ Teste 7: Laudos pendentes")
        cursor.execute("SELECT COUNT(*) FROM laudos WHERE status = 'em_andamento'")
        laudos_pendentes = cursor.fetchone()[0]
        print(f"‚úÖ Laudos pendentes: {laudos_pendentes}")
        
        # Teste 8: Laudos aprovados
        print("\n‚úÖ Teste 8: Laudos aprovados")
        cursor.execute("SELECT COUNT(*) FROM laudos WHERE status IN ('aprovado_manutencao', 'aprovado_vendas', 'finalizado')")
        laudos_aprovados = cursor.fetchone()[0]
        print(f"‚úÖ Laudos aprovados: {laudos_aprovados}")
        
        # Teste 9: Fechar conex√£o
        print("\nüîí Teste 9: Fechar conex√£o")
        conn.close()
        print("‚úÖ Conex√£o fechada")
        
        # Teste 10: Tentar usar cursor ap√≥s fechar
        print("\n‚ùå Teste 10: Tentar usar cursor ap√≥s fechar")
        try:
            cursor.execute("SELECT COUNT(*) FROM laudos")
            print("‚ùå Erro: Cursor ainda funcionando ap√≥s fechar conex√£o")
        except sqlite3.OperationalError as e:
            print(f"‚úÖ Erro esperado: {e}")
        
        print("\nüéâ Todos os testes conclu√≠dos!")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    test_db_connection() 