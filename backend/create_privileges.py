#!/usr/bin/env python3
"""
Script para gerenciar privil√©gios de t√©cnicos
Permite que o Admin defina quais t√©cnicos podem finalizar laudos
"""

import sqlite3
import os

def create_privileges_table():
    """Cria a tabela de privil√©gios se n√£o existir"""
    db_path = 'laudos.db'
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        print("üîÑ Criando tabela de privil√©gios...")
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_privileges (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                privilege_type TEXT NOT NULL,
                granted_by INTEGER NOT NULL,
                granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (granted_by) REFERENCES users (id)
            )
        ''')
        
        conn.commit()
        print("‚úÖ Tabela de privil√©gios criada com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro ao criar tabela: {e}")
    finally:
        conn.close()

def grant_finalization_privilege(user_id, granted_by):
    """Concede privil√©gio de finaliza√ß√£o a um usu√°rio"""
    db_path = 'laudos.db'
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # Verificar se o usu√°rio existe
        cursor.execute('SELECT username, user_type FROM users WHERE id = ?', (user_id,))
        user = cursor.fetchone()
        
        if not user:
            print(f"‚ùå Usu√°rio com ID {user_id} n√£o encontrado")
            return False
        
        username, user_type = user
        
        if user_type != 'tecnico':
            print(f"‚ùå Usu√°rio {username} n√£o √© t√©cnico")
            return False
        
        # Verificar se j√° tem o privil√©gio
        cursor.execute('''
            SELECT id FROM user_privileges 
            WHERE user_id = ? AND privilege_type = 'finalize_laudos' AND is_active = TRUE
        ''', (user_id,))
        
        if cursor.fetchone():
            print(f"‚ö†Ô∏è Usu√°rio {username} j√° possui privil√©gio de finaliza√ß√£o")
            return True
        
        # Conceder privil√©gio
        cursor.execute('''
            INSERT INTO user_privileges (user_id, privilege_type, granted_by)
            VALUES (?, 'finalize_laudos', ?)
        ''', (user_id, granted_by))
        
        conn.commit()
        print(f"‚úÖ Privil√©gio de finaliza√ß√£o concedido ao t√©cnico {username}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao conceder privil√©gio: {e}")
        return False
    finally:
        conn.close()

def revoke_finalization_privilege(user_id, revoked_by):
    """Revoga privil√©gio de finaliza√ß√£o de um usu√°rio"""
    db_path = 'laudos.db'
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # Verificar se o usu√°rio existe
        cursor.execute('SELECT username FROM users WHERE id = ?', (user_id,))
        user = cursor.fetchone()
        
        if not user:
            print(f"‚ùå Usu√°rio com ID {user_id} n√£o encontrado")
            return False
        
        username = user[0]
        
        # Revogar privil√©gio
        cursor.execute('''
            UPDATE user_privileges 
            SET is_active = FALSE 
            WHERE user_id = ? AND privilege_type = 'finalize_laudos' AND is_active = TRUE
        ''', (user_id,))
        
        if cursor.rowcount > 0:
            conn.commit()
            print(f"‚úÖ Privil√©gio de finaliza√ß√£o revogado do t√©cnico {username}")
            return True
        else:
            print(f"‚ö†Ô∏è Usu√°rio {username} n√£o possui privil√©gio de finaliza√ß√£o ativo")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro ao revogar privil√©gio: {e}")
        return False
    finally:
        conn.close()

def list_privileges():
    """Lista todos os privil√©gios ativos"""
    db_path = 'laudos.db'
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT up.id, u.username, up.privilege_type, g.username as granted_by, up.granted_at
            FROM user_privileges up
            JOIN users u ON up.user_id = u.id
            JOIN users g ON up.granted_by = g.id
            WHERE up.is_active = TRUE
            ORDER BY up.granted_at DESC
        ''')
        
        privileges = cursor.fetchall()
        
        print(f"\nüìã Privil√©gios Ativos ({len(privileges)}):")
        for privilege_id, username, privilege_type, granted_by, granted_at in privileges:
            print(f"  - {username}: {privilege_type} (concedido por {granted_by} em {granted_at})")
        
        # Listar t√©cnicos sem privil√©gios
        cursor.execute('''
            SELECT u.id, u.username 
            FROM users u 
            WHERE u.user_type = 'tecnico' 
            AND u.id NOT IN (
                SELECT user_id FROM user_privileges 
                WHERE privilege_type = 'finalize_laudos' AND is_active = TRUE
            )
        ''')
        
        techs_without_privileges = cursor.fetchall()
        
        print(f"\nüîí T√©cnicos sem privil√©gio de finaliza√ß√£o ({len(techs_without_privileges)}):")
        for user_id, username in techs_without_privileges:
            print(f"  - {username} (ID: {user_id})")
        
    except Exception as e:
        print(f"‚ùå Erro ao listar privil√©gios: {e}")
    finally:
        conn.close()

def setup_initial_privileges():
    """Configura privil√©gios iniciais para demonstra√ß√£o"""
    db_path = 'laudos.db'
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # Buscar admin e t√©cnico
        cursor.execute('SELECT id FROM users WHERE username = "admin"')
        admin = cursor.fetchone()
        
        cursor.execute('SELECT id FROM users WHERE username = "tecnico"')
        tecnico = cursor.fetchone()
        
        if admin and tecnico:
            admin_id = admin[0]
            tecnico_id = tecnico[0]
            
            # Conceder privil√©gio ao t√©cnico
            if grant_finalization_privilege(tecnico_id, admin_id):
                print("‚úÖ Privil√©gio inicial configurado com sucesso!")
            else:
                print("‚ùå Erro ao configurar privil√©gio inicial")
        else:
            print("‚ùå Usu√°rios admin ou t√©cnico n√£o encontrados")
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar privil√©gios iniciais: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    print("üéØ Sistema de Privil√©gios - RSM")
    print("=" * 50)
    
    create_privileges_table()
    setup_initial_privileges()
    list_privileges()
    
    print("\nüéâ Configura√ß√£o conclu√≠da!")
    print("\nüìã Comandos dispon√≠veis:")
    print("  - grant_finalization_privilege(user_id, admin_id)")
    print("  - revoke_finalization_privilege(user_id, admin_id)")
    print("  - list_privileges()") 