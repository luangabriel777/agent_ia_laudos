# Script para iniciar o sistema RSM - Rede de Servi√ßos Moura
# Autor: Sistema RSM
# Data: 2025-07-28

Write-Host "üöÄ INICIANDO SISTEMA RSM - REDE DE SERVI√áOS MOURA" -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor Green

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "backend\app.py")) {
    Write-Host "‚ùå ERRO: Execute este script no diret√≥rio raiz do projeto RSM" -ForegroundColor Red
    Write-Host "   Diret√≥rio atual: $(Get-Location)" -ForegroundColor Yellow
    exit 1
}

# Fun√ß√£o para iniciar o backend
function Start-Backend {
    Write-Host "üîß Iniciando BACKEND..." -ForegroundColor Cyan
    Set-Location "backend"
    
    # Verificar se Python est√° instalado
    try {
        python --version | Out-Null
    } catch {
        Write-Host "‚ùå ERRO: Python n√£o encontrado. Instale Python 3.8+ primeiro." -ForegroundColor Red
        exit 1
    }
    
    # Verificar se as depend√™ncias est√£o instaladas
    if (-not (Test-Path "requirements.txt")) {
        Write-Host "‚ùå ERRO: requirements.txt n√£o encontrado" -ForegroundColor Red
        exit 1
    }
    
    Write-Host "‚úÖ Backend iniciado na porta 8000" -ForegroundColor Green
    Write-Host "   URL: http://localhost:8000" -ForegroundColor Yellow
    Write-Host "   Docs: http://localhost:8000/docs" -ForegroundColor Yellow
    
    # Iniciar o backend em background
    Start-Process -FilePath "python" -ArgumentList "app.py" -WindowStyle Hidden
}

# Fun√ß√£o para iniciar o frontend
function Start-Frontend {
    Write-Host "üé® Iniciando FRONTEND..." -ForegroundColor Cyan
    Set-Location "frontend"
    
    # Verificar se Node.js est√° instalado
    try {
        node --version | Out-Null
    } catch {
        Write-Host "‚ùå ERRO: Node.js n√£o encontrado. Instale Node.js primeiro." -ForegroundColor Red
        exit 1
    }
    
    # Verificar se npm est√° instalado
    try {
        npm --version | Out-Null
    } catch {
        Write-Host "‚ùå ERRO: npm n√£o encontrado. Instale npm primeiro." -ForegroundColor Red
        exit 1
    }
    
    # Verificar se package.json existe
    if (-not (Test-Path "package.json")) {
        Write-Host "‚ùå ERRO: package.json n√£o encontrado" -ForegroundColor Red
        exit 1
    }
    
    Write-Host "‚úÖ Frontend iniciado na porta 3000" -ForegroundColor Green
    Write-Host "   URL: http://localhost:3000" -ForegroundColor Yellow
    
    # Iniciar o frontend em background
    Start-Process -FilePath "npm" -ArgumentList "start" -WindowStyle Hidden
}

# Fun√ß√£o para verificar status
function Show-Status {
    Write-Host ""
    Write-Host "üìä STATUS DO SISTEMA:" -ForegroundColor Magenta
    Write-Host "=====================" -ForegroundColor Magenta
    
    # Verificar se o backend est√° rodando
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8000/docs" -TimeoutSec 3 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Backend: RODANDO (porta 8000)" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Backend: PARADO" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Backend: PARADO" -ForegroundColor Red
    }
    
    # Verificar se o frontend est√° rodando
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3000" -TimeoutSec 3 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Frontend: RODANDO (porta 3000)" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Frontend: PARADO" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Frontend: PARADO" -ForegroundColor Red
    }
}

# Fun√ß√£o para abrir o navegador
function Open-Browser {
    Write-Host ""
    Write-Host "üåê Abrindo navegador..." -ForegroundColor Cyan
    Start-Process "http://localhost:3000"
}

# Fun√ß√£o principal
function Main {
    Write-Host "Escolha uma op√ß√£o:" -ForegroundColor Yellow
    Write-Host "1. Iniciar Backend" -ForegroundColor White
    Write-Host "2. Iniciar Frontend" -ForegroundColor White
    Write-Host "3. Iniciar Ambos (Backend + Frontend)" -ForegroundColor White
    Write-Host "4. Verificar Status" -ForegroundColor White
    Write-Host "5. Abrir no Navegador" -ForegroundColor White
    Write-Host "6. Sair" -ForegroundColor White
    
    $choice = Read-Host "Digite sua escolha (1-6)"
    
    switch ($choice) {
        "1" { 
            Start-Backend
            Set-Location ".."
        }
        "2" { 
            Start-Frontend
            Set-Location ".."
        }
        "3" { 
            Start-Backend
            Set-Location ".."
            Start-Sleep -Seconds 3
            Start-Frontend
            Set-Location ".."
            Start-Sleep -Seconds 5
            Open-Browser
        }
        "4" { Show-Status }
        "5" { Open-Browser }
        "6" { 
            Write-Host "üëã Saindo..." -ForegroundColor Green
            exit 0
        }
        default { 
            Write-Host "‚ùå Op√ß√£o inv√°lida!" -ForegroundColor Red
        }
    }
}

# Executar fun√ß√£o principal
Main 