#!/usr/bin/env python3
"""
Teste do Sistema de Monitoramento - RSM
Verifica se o sistema de monitoramento est√° funcionando corretamente
"""

import sys
import os
import time
import requests
import json
from datetime import datetime

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def test_monitoring_system():
    """Testa o sistema de monitoramento"""
    print("üîç TESTANDO SISTEMA DE MONITORAMENTO RSM")
    print("=" * 50)
    
    # Teste 1: Importar m√≥dulo de monitoramento
    print("\n1Ô∏è‚É£ Testando importa√ß√£o do m√≥dulo de monitoramento...")
    try:
        from monitoring import health_checker
        print("‚úÖ M√≥dulo de monitoramento importado com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao importar m√≥dulo: {e}")
        return False
    
    # Teste 2: Verificar health check
    print("\n2Ô∏è‚É£ Testando health check do sistema...")
    try:
        health_status = health_checker.get_health_status()
        print(f"‚úÖ Health check: {health_status['status']} (Score: {health_status['health_score']})")
        print(f"   CPU: {health_status['system']['cpu_percent']:.1f}%")
        print(f"   Mem√≥ria: {health_status['system']['memory_percent']:.1f}%")
        print(f"   Disco: {health_status['system']['disk_percent']:.1f}%")
    except Exception as e:
        print(f"‚ùå Erro no health check: {e}")
        return False
    
    # Teste 3: Verificar m√©tricas do sistema
    print("\n3Ô∏è‚É£ Testando coleta de m√©tricas do sistema...")
    try:
        system_metrics = health_checker.get_system_metrics()
        print(f"‚úÖ M√©tricas do sistema coletadas:")
        print(f"   CPU: {system_metrics.cpu_percent:.1f}%")
        print(f"   Mem√≥ria: {system_metrics.memory_percent:.1f}%")
        print(f"   Disco: {system_metrics.disk_percent:.1f}%")
        print(f"   Rede Enviada: {system_metrics.network_sent:,} bytes")
        print(f"   Rede Recebida: {system_metrics.network_recv:,} bytes")
    except Exception as e:
        print(f"‚ùå Erro ao coletar m√©tricas: {e}")
        return False
    
    # Teste 4: Verificar m√©tricas da aplica√ß√£o
    print("\n4Ô∏è‚É£ Testando m√©tricas da aplica√ß√£o...")
    try:
        app_metrics = health_checker.get_application_metrics()
        print(f"‚úÖ M√©tricas da aplica√ß√£o:")
        print(f"   Conex√µes Ativas: {app_metrics.active_connections}")
        print(f"   Taxa de Erro: {app_metrics.error_rate:.2f}%")
        print(f"   Tempo de Resposta: {app_metrics.average_response_time:.2f}s")
    except Exception as e:
        print(f"‚ùå Erro ao coletar m√©tricas da aplica√ß√£o: {e}")
        return False
    
    # Teste 5: Verificar m√©tricas de neg√≥cio
    print("\n5Ô∏è‚É£ Testando m√©tricas de neg√≥cio...")
    try:
        business_metrics = health_checker.get_business_metrics()
        print(f"‚úÖ M√©tricas de neg√≥cio:")
        print(f"   Total de Laudos: {business_metrics.total_laudos}")
        print(f"   Laudos Hoje: {business_metrics.laudos_today}")
        print(f"   Pendentes: {business_metrics.pending_approvals}")
        print(f"   Taxa de Convers√£o: {business_metrics.conversion_rate:.1f}%")
    except Exception as e:
        print(f"‚ùå Erro ao coletar m√©tricas de neg√≥cio: {e}")
        return False
    
    # Teste 6: Verificar alertas
    print("\n6Ô∏è‚É£ Testando sistema de alertas...")
    try:
        alerts = health_checker.get_recent_alerts(5)
        print(f"‚úÖ Alertas recentes: {len(alerts)} encontrados")
        for alert in alerts[:3]:  # Mostrar apenas os 3 primeiros
            print(f"   - {alert['severity'].upper()}: {alert['message']}")
    except Exception as e:
        print(f"‚ùå Erro ao verificar alertas: {e}")
        return False
    
    # Teste 7: Testar API endpoints (se o servidor estiver rodando)
    print("\n7Ô∏è‚É£ Testando endpoints da API...")
    try:
        # Testar health endpoint
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ Health endpoint: {health_data['status']} (Score: {health_data['health_score']})")
        else:
            print(f"‚ö†Ô∏è Health endpoint retornou status {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è Servidor n√£o est√° rodando (ignorando teste de API)")
    except Exception as e:
        print(f"‚ùå Erro ao testar API: {e}")
    
    # Teste 8: Verificar banco de dados de monitoramento
    print("\n8Ô∏è‚É£ Testando banco de dados de monitoramento...")
    try:
        # Verificar se o arquivo de banco foi criado
        db_path = os.path.join(os.path.dirname(__file__), 'backend', 'monitoring.db')
        if os.path.exists(db_path):
            print(f"‚úÖ Banco de monitoramento criado: {os.path.getsize(db_path)} bytes")
        else:
            print("‚ö†Ô∏è Banco de monitoramento n√£o encontrado")
    except Exception as e:
        print(f"‚ùå Erro ao verificar banco: {e}")
    
    print("\n" + "=" * 50)
    print("üéâ TESTE DE MONITORAMENTO CONCLU√çDO!")
    print("O sistema de monitoramento est√° funcionando corretamente.")
    
    return True

def test_backend_endpoints():
    """Testa os endpoints do backend"""
    print("\nüîó TESTANDO ENDPOINTS DO BACKEND")
    print("=" * 40)
    
    base_url = "http://localhost:8000"
    endpoints = [
        "/health",
        "/admin/executive-stats",
        "/admin/top-performers", 
        "/admin/critical-issues",
        "/admin/recent-activities"
    ]
    
    for endpoint in endpoints:
        try:
            print(f"\nTestando {endpoint}...")
            response = requests.get(f"{base_url}{endpoint}", timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ {endpoint}: OK")
                if isinstance(data, dict) and len(data) > 0:
                    print(f"   Dados: {list(data.keys())}")
                elif isinstance(data, list):
                    print(f"   Itens: {len(data)}")
            elif response.status_code == 403:
                print(f"‚ö†Ô∏è {endpoint}: Acesso negado (esperado para alguns endpoints)")
            else:
                print(f"‚ùå {endpoint}: Status {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print(f"‚ö†Ô∏è {endpoint}: Servidor n√£o est√° rodando")
        except Exception as e:
            print(f"‚ùå {endpoint}: Erro - {e}")

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTES DO SISTEMA RSM")
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Testar sistema de monitoramento
    success = test_monitoring_system()
    
    if success:
        # Testar endpoints do backend
        test_backend_endpoints()
        
        print("\n" + "=" * 60)
        print("üéØ RESUMO DOS TESTES")
        print("‚úÖ Sistema de monitoramento: FUNCIONANDO")
        print("‚úÖ M√©tricas do sistema: COLETADAS")
        print("‚úÖ Alertas: CONFIGURADOS")
        print("‚úÖ Banco de dados: CRIADO")
        print("\nüöÄ O RSM est√° pronto para produ√ß√£o!")
    else:
        print("\n‚ùå Alguns testes falharam. Verifique os erros acima.")
        sys.exit(1) 